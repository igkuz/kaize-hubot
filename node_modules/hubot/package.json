{
  "name": "hubot",
  "version": "2.5.5",
  "author": {
    "name": "hubot"
  },
  "keywords": [
    "github",
    "hubot",
    "campfire",
    "bot"
  ],
  "description": "A simple helpful robot for your Company",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/github/hubot/raw/master/LICENSE.md"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/github/hubot.git"
  },
  "dependencies": {
    "coffee-script": "1.6.2",
    "optparse": "1.0.4",
    "scoped-http-client": "0.9.8",
    "log": "1.3.1",
    "express": "3.1.1"
  },
  "engines": {
    "node": ">= 0.8.x",
    "npm": ">= 1.1.x"
  },
  "main": "./index",
  "bin": {
    "hubot": "./bin/hubot"
  },
  "readme": "# Hubot\n\nThis is a version of GitHub's Campfire bot, hubot. He's pretty cool.\n\n**You'll probably never have to hack on this repo directly.**\n\nFollow the instructions below and get your own hubot ready to deploy.\n\n## Getting Your Own\n\nMake sure you have [node.js][nodejs] and [npm][npmjs] installed.\n\nYou can install the `hubot` npm package globally and you will be able to run\n`hubot --create <PATH>` if you've setup npm packages to be in your `PATH`.\n\n    $ npm install -g hubot coffee-script\n    $ hubot --create <path>\n\nThen the directory at `<path>` contains a deployable hubot that you're able to\ndeploy to heroku or run locally.\n\n## Adapters\n\nAdapters are the interface to the service you want your hubot to run on. This\ncan be something like Campfire or IRC. There are a number of third party\nadapters that the community have contributed. Check the\n[hubot wiki][hubot-wiki] for the available ones and how to create your own.\n\nPlease submit issues and pull requests for third party adapters to the adapter\nrepository, not this one (unless it's the Campfire or shell adapter).\n\n## Hubot Scripts\n\nHubot ships with a number of default scripts, but there's a growing number of\nextras in the [hubot-scripts][hubot-scripts] repository. `hubot-scripts` is a\nway to share scripts with the entire community.\n\nCheck out the [README][hubot-scripts-readme] for more help on installing\nindividual scripts.\n\n## External Scripts\n\nThis functionality allows users to enable scripts from `npm` packages which\ndon't have to be included in the `hubot-scripts` repository.\n\nTo enable to functionality you can follow the following steps.\n\n1. Add the packages as dependencies into your `package.json`\n2. `npm install` to make sure those packages are installed\n\nTo enable third-party scripts that you've added you will need to add the package\nname as a double quoted string to the `external-scripts.json` file for your\nhubot.\n\n**Please note that external scripts may become the default for hubot scripts in\nfuture releases.**\n\n### Creating A Script Package\n\nCreating a script package for hubot is very simple. Start by creating a normal\n`npm` package. Make sure you add a main file for the entry point (e.g.\n`index.js` or `index.coffee`).\n\nIn this entry point file you're going to have to export a function that hubot\nwill use to load the scripts in your package. Below is a simple example for\nloading each script in a `./scripts` directory in your package.\n\n```coffeescript\nFs   = require 'fs'\nPath = require 'path'\n\nmodule.exports = (robot) ->\n  path = Path.resolve __dirname, 'scripts'\n  Fs.exists path, (exists) ->\n    if exists\n      robot.loadFile path, file for file in Fs.readdirSync(path)\n```\n\nAfter you've built your `npm` package you can publish it to [npmjs][npmjs].\n\n## HTTP Listener\n\nHubot has a HTTP listener which listens on the port specified by the `PORT`\nenvironment variable. If PORT is not specified, the default port will be 8080.\n\nYou can specify routes to listen on in your scripts by using the `router`\nproperty on `robot`.\n\n```coffeescript\nmodule.exports = (robot) ->\n  robot.router.get \"/hubot/version\", (req, res) ->\n    res.end robot.version\n```\n\nThere are functions for GET, POST, PUT and DELETE, which all take a route and\ncallback function that accepts a request and a response.\n\nIn addition, if you set `EXPRESS_STATIC`, the HTTP listener will serve static\nfiles from this directory.\n\n## Events\n\nHubot can also respond to events which can be used to pass data between scripts.\n\n```coffeescript\n# src/scripts/github-commits.coffee\nmodule.exports = (robot) ->\n  robot.router.post \"/hubot/gh-commits\", (req, res) ->\n  \t#code goes here\n    robot.emit \"commit\", {\n        user    : {}, #hubot user object\n        repo    : 'https://github.com/github/hubot',\n        hash  : '2e1951c089bd865839328592ff673d2f08153643'\n    }\n```\n```coffeescript\n# src/scripts/heroku.coffee\nmodule.exports = (robot) ->\n  robot.on \"commit\", (commit) ->\n    robot.send commit.user, \"Will now deploy #{commit.hash} from #{commit.repo}!\"\n    #deploy code goes here\n```\n\nIf you provide an event, it's very recommended to include a hubot user object\nin data. In case of other reacting scripts want to respond to chat.\n\n## Authentication\n\nHubot has first class support for specify roles which a user must have to run\nspecific commands. If you wish you use this support you must set the the\nfollowing environment variables:\n\n    * `HUBOT_AUTH_ADMIN` a comma separated list of admin IDs\n\nYou can find the user IDs by running the `show users` command. The admin IDs\nspecify which users can add and remove roles from users. Please note you can\nonly assign the admin role using the environment variable.\n\n### Assigning a Role\n\nYou can assign a role to the user using the following command:\n\n    hubot Joe Bloggs has developer role\n    hubot John Doe has ops role\n\nThe name must be the exact name as stored in hubot's brain.\n\n### Removing a Role\n\nYou can remove a role from the user using the following command:\n\n    hubot Joe Bloggs doesn't have developer role\n    hubot John Doe does not have ops role\n\n### Viewing a Users Roles\n\nYou can view the roles a user has or see which users have the admin role with\nthe following commands:\n\n    hubot what roles does Joe Bloggs have?\n    hubot who has admin role?\n\n## Persistence\n\nHubot has an in-memory key-value store exposed as `robot.brain` that can be\nused to store and retrieve data by scripts.\n\n```coffeescript\nmodule.exports = (robot) ->\n\n  robot.respond /have a beer/i, (msg) ->\n    # Get number of beers had (coerced to a number).\n    beersHad = robot.brain.get('totalBeers') * 1 or 0\n    \n    if beersHad > 4\n      msg.respond \"I'm too drunk..\"\n    \n    else\n      msg.respond 'Sure!'\n      \n      robot.brain.set 'totalBeers', beersHad+1\n      # Or robot.brain.set totalBeers: beersHad+1\n```\n\nIf the script needs to store user data, `robot.brain` has a built-in interface\nfor it.\n\n```coffeescript\nmodule.exports = (robot) ->\n\n  robot.respond /who is @?([\\w .\\-]+)\\?*$/i, (msg) ->\n    name = msg.match[1].trim()\n\n    users = robot.brain.usersForFuzzyName(name)\n    if users.length is 1\n      user = users[0]\n      # Do something interesting here..\n\n      msg.send \"#{name} is user - #{user}\"\n```\n\n[nodejs]: http://nodejs.org\n[npmjs]: http://npmjs.org\n[hubot-wiki]: https://github.com/github/hubot/wiki\n[hubot-scripts]: https://github.com/github/hubot-scripts\n[hubot-scripts-readme]: https://github.com/github/hubot-scripts#readme\n",
  "readmeFilename": "README.md",
  "_id": "hubot@2.5.5",
  "_from": "hubot@2.5.5"
}
